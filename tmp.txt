import os
import json
import matplotlib.pyplot as plt
from collections import defaultdict

# 配置路径和数据结构
folder_path = "your_folder_path"  # 替换为您的文件夹路径
data = defaultdict(lambda: defaultdict(int))
major_counts = defaultdict(int)

# 遍历文件夹结构
for entry in os.scandir(folder_path):
    if entry.is_dir():
        # 提取大小类别信息
        folder_name = entry.name
        parts = folder_name.split('_')
        major_class = parts[0] if parts else "Unknown"
        minor_class = folder_name
        
        # 统计JSON文件数量
        json_count = 0
        for file in os.scandir(entry.path):
            if file.is_file() and file.name.endswith('.json'):
                json_count += 1
        
        # 存储统计结果
        data[major_class][minor_class] = json_count
        major_counts[major_class] += json_count

# 准备内层(大类别)数据
major_labels = list(major_counts.keys())
major_sizes = list(major_counts.values())

# 准备外层(小类别)数据
minor_labels = []
minor_sizes = []
minor_colors = []

# 创建颜色映射
cmap = plt.get_cmap('tab20')
for i, major in enumerate(major_labels):
    color = cmap(i / len(major_labels))
    for minor, size in data[major].items():
        minor_labels.append(minor)
        minor_sizes.append(size)
        minor_colors.append(color)


plt.figure(figsize=(12, 8), dpi=100)

# 内层扇形图（大类别）
plt.pie(major_sizes, labels=major_labels, autopct='%1.1f%%',
        radius=0.5, colors=[cmap(i/len(major_labels)) for i in range(len(major_labels))],
        wedgeprops=dict(width=0.2, edgecolor='w'),
        textprops={'fontsize': 9, 'weight': 'bold'})

# 外层扇形图（小类别）
plt.pie(minor_sizes, labels=minor_labels, labeldistance=0.8,
        colors=minor_colors,
        radius=0.7, wedgeprops=dict(width=0.2, edgecolor='w'),
        textprops={'fontsize': 7},
        rotatelabels=True, pctdistance=0.8)

# 添加中心空白区域创建环形效果
centre_circle = plt.Circle((0,0), 0.3, fc='white')
plt.gca().add_artist(centre_circle)

# 添加标题和图例
plt.title('文件夹类别分布\n内环: 大类别 | 外环: 小类别', fontsize=14, pad=20)
plt.axis('equal')
plt.tight_layout()
plt.show()
