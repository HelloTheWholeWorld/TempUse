import time
from openai import OpenAI

# 配置 vLLM 服务信息
client = OpenAI(
    base_url="http://localhost:8000/v1",
    api_key="EMPTY"  # vLLM 默认无需密钥
)

# 固定测试参数
TEST_PROMPT = "请用300字概述量子计算的原理与应用，并举例说明其优势。"
SEED = 42
TEMPERATURE = 0.3
TOP_P = 0.9

def test_max_tokens(max_tokens_list: list):
    """测试不同 max_tokens 的输出一致性"""
    results = {}
    for max_tokens in max_tokens_list:
        response = client.chat.completions.create(
            model="Qwen/Qwen3-4B",
            messages=[{"role": "user", "content": TEST_PROMPT}],
            max_tokens=max_tokens,
            temperature=TEMPERATURE,
            top_p=TOP_P,
            seed=SEED,
            extra_body={
                "enable_thinking": True  # 启用思考模式[4](@ref)
            }
        )
        # 解析思考内容与最终输出（Qwen3 分隔符为 token_id=151668）[4](@ref)
        full_output = response.choices[0].message.content
        try:
            thinking_end = full_output.rindex("�")  # 特殊分隔符占位符
            thinking_content = full_output[:thinking_end].strip()
            final_content = full_output[thinking_end+1:].strip()
        except ValueError:
            thinking_content = ""
            final_content = full_output
        
        results[max_tokens] = {
            "full_output": full_output,
            "thinking": thinking_content,
            "final_output": final_content,
            "token_usage": response.usage.completion_tokens
        }
    return results

def test_repetition_penalty(penalty_list: list, max_tokens=300):
    """测试不同 repetition_penalty 的重复抑制效果"""
    results = {}
    for penalty in penalty_list:
        response = client.chat.completions.create(
            model="Qwen/Qwen3-4B",
            messages=[{"role": "user", "content": TEST_PROMPT}],
            max_tokens=max_tokens,
            temperature=TEMPERATURE,
            top_p=TOP_P,
            seed=SEED,
            extra_body={
                "repetition_penalty": penalty,  # 通过 extra_body 传递[9](@ref)
                "enable_thinking": False  # 关闭思考简化分析
            }
        )
        content = response.choices[0].message.content
        # 统计重复关键词频次（示例：量子）
        keyword = "量子"
        repeat_count = content.count(keyword)
        
        results[penalty] = {
            "output": content,
            "repeat_count": repeat_count,
            "repeat_keyword": keyword
        }
    return results

# 执行测试
if __name__ == "__main__":
    # 测试 1: max_tokens 对输出的影响 (100, 300, 512, 1024)
    max_token_results = test_max_tokens([100, 300, 512, 1024])
    print("\n" + "="*50)
    print("max_tokens 测试结果：")
    for mt, data in max_token_results.items():
        print(f"max_tokens={mt} | 实际生成Token: {data['token_usage']}")
        print(f"思考内容: {data['thinking'][:60]}...")
        print(f"最终输出: {data['final_output'][:100]}...\n")

    # 测试 2: repetition_penalty 对重复性的影响 (1.0, 1.2, 2.0)
    penalty_results = test_repetition_penalty([1.0, 1.2, 2.0])
    print("\n" + "="*50)
    print("repetition_penalty 测试结果：")
    for rp, data in penalty_results.items():
        print(f"penalty={rp} | '{data['repeat_keyword']}'重复次数: {data['repeat_count']}")
        print(f"输出片段: {data['output'][:100]}...\n")
